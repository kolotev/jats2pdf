{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Overview RESTful API around Antenna House Formatter application, which is used for converting manuscript XML tagged according to JATS to PDF. Note Visit 0README.md page for reading this project documentaion. Project anchors Repository Configuration (restricted access) Confluence Project layout The following layout is available for those who have access to the source repository of this project. bin/ # scripts for running variuos tasks/modules. etc/ # settings. doc/ # documentation of this project. src/ # source code for this project. tests/ # variuos tests executed during building process. requirements/ # dependencies of this project doc/fsm_diagrams # diagrams of finate state machines used in this project. Admonitions The following adminitions could be used in context of this documentation. Qualifiers note, attention, caution, danger, error, hint, important, tip, warning, seealso See also https://python-markdown.github.io/extensions/admonition/","title":"Overview"},{"location":"index.html#overview","text":"RESTful API around Antenna House Formatter application, which is used for converting manuscript XML tagged according to JATS to PDF. Note Visit 0README.md page for reading this project documentaion.","title":"Overview"},{"location":"index.html#project-anchors","text":"Repository Configuration (restricted access) Confluence","title":"Project anchors"},{"location":"index.html#project-layout","text":"The following layout is available for those who have access to the source repository of this project. bin/ # scripts for running variuos tasks/modules. etc/ # settings. doc/ # documentation of this project. src/ # source code for this project. tests/ # variuos tests executed during building process. requirements/ # dependencies of this project doc/fsm_diagrams # diagrams of finate state machines used in this project.","title":"Project layout"},{"location":"index.html#admonitions","text":"The following adminitions could be used in context of this documentation. Qualifiers note, attention, caution, danger, error, hint, important, tip, warning, seealso See also https://python-markdown.github.io/extensions/admonition/","title":"Admonitions"},{"location":"0README.html","text":"Introduction This a system was developed to provided RESTful API for manuscript submission systems around Antenna House Formatter application, which is used for converting manuscript XML tagged according to JATS to PDF. The system consist of 3 components, 2 of them are part of this development. First component It is a RESTful web service (aka jats2pdf-ws front-end), which consumers are directly communicating with. Second component It is a back-office (aka jats2pdf-bo) which implements a bussiness logic for life cycle of deposits and serves as a harness around 3rd component. Third component It is out of scope of this document. jats2pdf-ws (web service) This web service provides a RESTful API around Antenna House Formatter (AHF) processing. With this API user should be able to submit manuscript in XML format tagged with one of supported version of NLM and JATS DTDs accompanied with images for figures and retrieve the result of the conversion of that XML along with images as a PDF document. Currently PDF document is produced with help of Antenna House Formatter and with PMC built XSLT and XSLT-FO stylesheets. This web service will be available from multiple NCBI data centers (Bethesda, Sterling) and performing role of a \"gatekeeper\" between the users, Amazon S3 storage and TM tasks (residing on PMC internal production servers like ipmc-prod, xslt2), the later ones are performing actual transformation of deposited XML manuscripts and images into PDF document. This web service will accept new \"deposits\" in the form of registered one (or many files) later uploaded into NCBI's Amazon S3 storage bucket with authorized/signed URLs or one (or many) URI/URLs of files (residing at the location(s) chosen by user) available for download from internal production PMC servers. The audience/users for this web service are manuscript submission systems at NCBI, UK and possibly PubMed Central ingest system. Initially this web service will not be protected by any form of authentication or authorization. Files uploaded by users to Amazon S3 storage will have an expiration period (to be defined later) as well as pdf files (result of the conversion). Amazon S3 storage bucket will be protected from abuse by use of presigned URLs for deposits and retrievals. Presinged URLs will be generated by this web service. The implementation of presigned URLs within Web Service require the access to Amazon AWS credentials (ACCESS_KEY and SECRET_KEY). jats2pdf-bo (back office) A package of scripts and applications for manuscript to pdf convertion. It interacts with consumer data through above web service and deposits result (PDF file) to Amazon S3 storage and updates deposit information with 1st component (above web service). References to AHF related scripts/TMsesions/TMtasks The main wrapper around AHF is pdfbuild (application written by Sergey Koshelkov and currently maintained by Valeriy Reshetnikov). It is used in the following TM task nihms_pdf and in the following session ingest_manuscript . Here is an example of executing \"ingest_manuscript\" session. There is another task pdfbuild in TM, which is probably rarely used or even not used at all anymore. Currently the following tasks refer to corresponding scripts/applications: TM task script/app location pdfbuild /pmc/bin/pdfbuild nihms_pdf /pmc/Work/manuscripts/pnihms_pdf.pl Master ticket in JIRA: PMC-31849 API descriptions: See README-API.md API use Examples: See README-API-use.md Bitbucket repository: jats2pdf-ws - RESTful API web service. Notes For back-office scripts see jats2pdf repository's folder src/project/api/backoffice/ . About Amazon Web Services in NCBI AWS API/SDK/CLI access with with your NCBI credentials Getting access to AWS \"Experimental Research Environment\" NCBI-AWS-RESEARCH JIRA Request for Amazon S3 keys in NCBI-DEV environment IAM manages various kinds of authentication, for both users and for software services that may need to authenticate with AWS, including: Access keys, which you may use with command-line tools. These are two strings, one the \u201cid\u201d, which is an upper-case alphabetic string of the form 'AXXXXXXXXXXXXXXXXXXX', and the other is the secret, which is a 40-character mixed-case base64-style string. These are often set up for services, not just users. Access keys that start with AKIA are normal keys. Access keys that start with ASIA are session/temporary keys from STS, and will require an additional \"SessionToken\" parameter to be sent along with the id and secret. Glossary TM Task Manager.","title":"Introduction"},{"location":"0README.html#introduction","text":"This a system was developed to provided RESTful API for manuscript submission systems around Antenna House Formatter application, which is used for converting manuscript XML tagged according to JATS to PDF. The system consist of 3 components, 2 of them are part of this development.","title":"Introduction"},{"location":"0README.html#first-component","text":"It is a RESTful web service (aka jats2pdf-ws front-end), which consumers are directly communicating with.","title":"First component"},{"location":"0README.html#second-component","text":"It is a back-office (aka jats2pdf-bo) which implements a bussiness logic for life cycle of deposits and serves as a harness around 3rd component.","title":"Second component"},{"location":"0README.html#third-component","text":"It is out of scope of this document.","title":"Third component"},{"location":"0README.html#jats2pdf-ws-web-service","text":"This web service provides a RESTful API around Antenna House Formatter (AHF) processing. With this API user should be able to submit manuscript in XML format tagged with one of supported version of NLM and JATS DTDs accompanied with images for figures and retrieve the result of the conversion of that XML along with images as a PDF document. Currently PDF document is produced with help of Antenna House Formatter and with PMC built XSLT and XSLT-FO stylesheets. This web service will be available from multiple NCBI data centers (Bethesda, Sterling) and performing role of a \"gatekeeper\" between the users, Amazon S3 storage and TM tasks (residing on PMC internal production servers like ipmc-prod, xslt2), the later ones are performing actual transformation of deposited XML manuscripts and images into PDF document. This web service will accept new \"deposits\" in the form of registered one (or many files) later uploaded into NCBI's Amazon S3 storage bucket with authorized/signed URLs or one (or many) URI/URLs of files (residing at the location(s) chosen by user) available for download from internal production PMC servers. The audience/users for this web service are manuscript submission systems at NCBI, UK and possibly PubMed Central ingest system. Initially this web service will not be protected by any form of authentication or authorization. Files uploaded by users to Amazon S3 storage will have an expiration period (to be defined later) as well as pdf files (result of the conversion). Amazon S3 storage bucket will be protected from abuse by use of presigned URLs for deposits and retrievals. Presinged URLs will be generated by this web service. The implementation of presigned URLs within Web Service require the access to Amazon AWS credentials (ACCESS_KEY and SECRET_KEY).","title":"jats2pdf-ws (web service)"},{"location":"0README.html#jats2pdf-bo-back-office","text":"A package of scripts and applications for manuscript to pdf convertion. It interacts with consumer data through above web service and deposits result (PDF file) to Amazon S3 storage and updates deposit information with 1st component (above web service).","title":"jats2pdf-bo (back office)"},{"location":"0README.html#references-to-ahf-related-scriptstmsesionstmtasks","text":"The main wrapper around AHF is pdfbuild (application written by Sergey Koshelkov and currently maintained by Valeriy Reshetnikov). It is used in the following TM task nihms_pdf and in the following session ingest_manuscript . Here is an example of executing \"ingest_manuscript\" session. There is another task pdfbuild in TM, which is probably rarely used or even not used at all anymore. Currently the following tasks refer to corresponding scripts/applications: TM task script/app location pdfbuild /pmc/bin/pdfbuild nihms_pdf /pmc/Work/manuscripts/pnihms_pdf.pl","title":"References to AHF related scripts/TMsesions/TMtasks"},{"location":"0README.html#master-ticket-in-jira","text":"PMC-31849","title":"Master ticket in JIRA:"},{"location":"0README.html#api-descriptions","text":"See README-API.md","title":"API descriptions:"},{"location":"0README.html#api-use-examples","text":"See README-API-use.md","title":"API use Examples:"},{"location":"0README.html#bitbucket-repository","text":"jats2pdf-ws - RESTful API web service.","title":"Bitbucket repository:"},{"location":"0README.html#notes","text":"For back-office scripts see jats2pdf repository's folder src/project/api/backoffice/ . About Amazon Web Services in NCBI AWS API/SDK/CLI access with with your NCBI credentials Getting access to AWS \"Experimental Research Environment\" NCBI-AWS-RESEARCH JIRA Request for Amazon S3 keys in NCBI-DEV environment IAM manages various kinds of authentication, for both users and for software services that may need to authenticate with AWS, including: Access keys, which you may use with command-line tools. These are two strings, one the \u201cid\u201d, which is an upper-case alphabetic string of the form 'AXXXXXXXXXXXXXXXXXXX', and the other is the secret, which is a 40-character mixed-case base64-style string. These are often set up for services, not just users. Access keys that start with AKIA are normal keys. Access keys that start with ASIA are session/temporary keys from STS, and will require an additional \"SessionToken\" parameter to be sent along with the id and secret.","title":"Notes"},{"location":"0README.html#glossary","text":"TM Task Manager.","title":"Glossary"},{"location":"1README-API.html","text":"API description Definitions depositor - consumer/user of this web service (could be retrieved from credentials [possibly user-name/login], when implemented later). deposit - single manuscript XML file accompanied with figure images, equations where applicable. The deposit could be provided as a single archive file (in zip, tar, tar.gz or tgz formats) which includes an XML (manuscript) with all image files it depends on. Or as individual files. domain - the name to be used in the context of manuscript branding and processes applied by the back-end service. item - as an input to web service: an entity which represents a file (or/and URL) the depositor suppose to provide for this web service to be used in the conversion process of the deposit to PDF document. When an item is a file, it has to be uploaded to Amazon S3 storage controlled by NCBI separatly. When an item is an URL starting with \"http://\", \"https://\" or \"ftp://\" sub-strings then the web service must be able to retrieve a file behind that URL from depositor's storage resource. This property is optional at the time of creation of deposit, but needs to be supplied in a separate POST request(s) individually via following URI /deposits/{deposit_pk}/items/ or with PUT , PATCH request via URI /deposits/{deposit_pk} if item needs to be replaced or modified. deposit_pk - the web service generated identifier of the deposit. item_pk - the web service generated identifier of the item. API functionalities Aimed for depositors Create a deposit . Read/View deposit state/details. Read/View collection of deposits states/details (with filters and sorting). Update/Replace a deposit Update/Modify a deposit Delete a deposit Create an item . Read/View item state/details. Read/View collection of items for a given deposit (with filters and sorting). Update/Replace an item Update/Modify an item Delete an item Commit deposit for processing/conversion. Read/View domain details. Read/View collection of domains (with filters and sorting). Aimed for BE service Create a domain . Read/View domain state/details. Read/View collection of domains for a given deposit (with filters and sorting). Update/Replace a domain Update/Modify a domain Delete a domain Read/View deposit state/details. Read/View collection of deposits states/details (with filters and sorting). Update/Modify a deposit . Read/View item state/details. Read/View collection of items for a given deposit (with filters and sorting). Update/Modify an item FIXME: check if you really need these: Create a result . Read/View result state/details. Read/View collection of results for a given deposit (with filters and sorting). Update/Replace a result Update/Modify a result Delete a result (jats2pdf-be) API specifications URI schema deposit collection - /deposits/ individual deposit - /deposits/{deposit_pk} item collection of a given deposit - /deposits/{deposit_pk}/items/ individual item - /deposits/{deposit_pk}/items/{item_pk} FIXME: check if you really need these: result collection of a given deposit - /deposits/{deposit_pk}/results/ individual result - /deposits/{deposit_pk}/results/{ruidX} domain collection - /domains/ individual domain - /domains/{domain_pk} depositor collection - /depositors/ individual depositor - /depositors/{depositor_pk} FIXME: list actions on deposits and items PROPERTIES of deposit deposit as response { \"deposit_uid\": $string, \"path\": $string, \"depositor\": $string, \"domain\": $string, \"state\": $string, // ENUM: [FIXME: values] \"state_info\": $string, \"created\": $string($date-time), \"updated\": $string($date-time) \"items\": [{}, ...] } deposit properties deposit_uid - a deposit unique identifier. path - a URI of the deposit. depositor - see explanations in Definitions section. domain - see explanations in Definitions section. state - a machine-readable deposit state. FIXME: detail deposit states (create FSM diagram). state_info - a human-readable deposit state. FIXME: human-readable string of the deposit state. created - time of creation of the deposit. updated - time of the last update of the deposit. items - an array of deposit items, see explanations of item in Definitions section. In this document you may see mnemonic value(s): deposit as input The following JSON snippet demonstrates the input understood by web service. FIXME: add properties or action values to transition states of the deposit to be used by back-end service report progress of the processing. { \"depositor\": $string, \"domain\": $string, \"items\": [{$item}, ..., {$item}], \"action\": $string // ENUM: [\"commit\", \"retry\"] } depositor - an abbreviation of the depositor. Required at the time of creation (POST). Optional in all other circumstances. domain - a required property of information of the \"domain\" the manuscript belongs to. Required at the time of creation (POST). Optional in all other circumstances. items - an array of filenames OR URIs. action - an optional property to be used to initiate an action for deposit . The following values are recognized: commit , retry . commit - could be provided at the time of creation/replacement of the deposit (make sense if items are provided as URLs and could be downloaded by back-end service right after creation of deposit ) or it should be used separately with PATCH methods and with /deposits/{deposit_pk} URI location, see mode details in UPDATE/MODIFY deposit section. PROPERTIES of item item as response { \"item_pk\": $string, \"path\": $string, \"depositor\": $string, \"s3_put_url\": $string, \"s3_get_url\": $string, \"state\": $string, // ENUM: [FIXME: values] \"created\": $string($date-time), \"updated\": $string($date-time), \"result\": $boolean }, item properties item_pk - an item unique identifier. path - a URI of the item, like the following URI \"/deposits/{deposit_pk}/items/{item_pk}\", depositor - an abbreviation of the depositor. s3_put_url - property is applicable when depositor intention was to deposit file to Amazon S3 storage controlled by NCBI. The value of this property (URL) will be regenerated with new expiration time, every time, when depositor access a deposit with \"deposit_pk\" or item with \"item_pk\". It will not be present if depositor provided a retrievable URL. puturl value is suitable to be used with method PUT when the file suppose to be uploaded to Amazon S3 storage. s3_get_url - populated with retrievable URL if it was provided by depositor or with signed URL if depositor uploaded a file to Amazon S3 storage. This URL is suitable to be used with method GET when the file is uploaded to Amazon S3 storage ( geturl is needed for jats2pdf-be back-end service). errors - a machine readable item state. FIXME: detail item states (create FSM diagram). created - time of creation of the item. FIXME: provide details on the type/format/specs of date/time updated - time of the last update of the item. FIXME: provide details on the type/format/specs of date/time result - a boolean property, which indicates, that the item is the result of conversion. item as input The following JSON snippet demonstrates the input understood by web service. { \"depositor\": $string, \"item\": $string, \"item_size\": $integer, // range constrain is [1 - 10,000,000] bytes \"item_md5\": $string, \"result\": $boolean } depositor - an abbreviation of the depositor. item - see explanations in Definitions section. result - a boolean property, which indicates, that the item is the result of the conversion. (optional property, which is suitable for back-end service to upload the result for depositor). item_size - file size of an item item_md5 - md5 digest strings in hexadecimal format. CREATE deposit HTTP REQUEST method HTTP POST location URI HTTP /deposits/ HTTP body - JSON string. See details in section deposit as input HTTP RESPONSE (On successful creation) HTTP code HTTP 201 (Created) HTTP header HTTP Location: /deposits/{deposit_pk} HTTP body is a JSON string. See details of deposit in PROPERTIES of deposit section JSON {...} READ deposit HTTP REQUEST method HTTP GET location URI HTTP /deposits/{deposit_pk} HTTP RESPONSE (if successful) HTTP code HTTP 200 (OK) HTTP body is a JSON string. See details of deposit in PROPERTIES of deposit section JSON {...} READ deposit collection HTTP REQUEST method HTTP GET location URI HTTP /deposits/ filters (as CGI params) HTTP deposit_uid=... state=... depositor=... domain=... order (as CGI param) HTTP __orderby=... HTTP RESPONSE (if successful) HTTP code HTTP 200 (OK) HTTP body is a JSON string. See details of deposit in PROPERTIES of deposit section JSON [ // zero deposits [], {}, // one deposit ... // or more deposits if available. ] UPDATE/REPLACE deposit HTTP REQUEST method HTTP PUT location URI HTTP /deposits/{deposit_pk} HTTP body - JSON string. See details in section deposit as input HTTP RESPONSE (On successful creation) HTTP code HTTP 209 (OK) HTTP body is a JSON string. See details of deposit in PROPERTIES of deposit section JSON {...} UPDATE/MODIFY deposit HTTP REQUEST method HTTP PATCH location URI HTTP /deposits/{deposit_pk} HTTP body - JSON string. See details in section deposit as input JSON {...} HTTP RESPONSE (if successful) HTTP code HTTP 200 (OK) HTTP body is a JSON string. See details of deposit in PROPERTIES of deposit section JSON {...} DELETE deposit HTTP REQUEST method HTTP DELETE location URI HTTP /deposits/{deposit_pk} HTTP RESPONSE (if successful) HTTP code HTTP 200 (OK) HTTP body is a JSON string. See details of deposit in PROPERTIES of deposit section JSON {...} CREATE item HTTP REQUEST method HTTP POST location URI HTTP /deposits/{deposit_pk}/items/ HTTP body - JSON string. See detail in section item as input HTTP RESPONSE (On successful creation) HTTP code HTTP 201 (Created) HTTP header HTTP Location: /deposits/{deposit_pk}/items/{item_pk} HTTP body is a JSON string. See details of deposit in item as response section JSON {...} READ item HTTP REQUEST method HTTP GET location URI HTTP /deposits/{deposit_pk}/items/{item_pk} HTTP RESPONSE (if successful) HTTP code HTTP 200 (OK) HTTP body is a JSON string. See details of deposit in PROPERTIES of item section JSON {...} // properties of the single item READ item collection HTTP REQUEST method HTTP GET location URI HTTP /deposits/{deposit_pk}/items/ filters (as CGI params) HTTP item_pk=... state=... depositor=... order (as CGI param) HTTP __orderby=... HTTP RESPONSE (if successful) HTTP code HTTP 200 (OK) HTTP body is a JSON string. See details of deposit in PROPERTIES of item section JSON [ // zero items [], {}, // one item ... // or more items if available. ] UPDATE/REPLACE item HTTP REQUEST method HTTP PUT location URI HTTP /deposits/{deposit_pk}/item/{item_pk} HTTP body - JSON string. See details in section deposit as input HTTP RESPONSE (On successful creation) HTTP code HTTP 209 (OK) HTTP body is a JSON string. See details of deposit in PROPERTIES of deposit section JSON {...} UPDATE/MODIFY item HTTP REQUEST method HTTP PATCH location URI HTTP /deposits/{deposit_pk}/item/{item_pk} HTTP body - JSON string. See details in section deposit as input JSON {...} HTTP RESPONSE (if successful) HTTP code HTTP 200 (OK) HTTP body is a JSON string. See details of deposit in PROPERTIES of deposit section JSON {...} DELETE item HTTP REQUEST method HTTP DELETE location URI HTTP /deposits/{deposit_pk}/items/{item_pk} HTTP RESPONSE (if successful) HTTP code HTTP 200 (OK) HTTP body is a JSON string. See details of item in PROPERTIES of item section JSON {...}","title":"API description"},{"location":"1README-API.html#api-description","text":"","title":"API description"},{"location":"1README-API.html#definitions","text":"depositor - consumer/user of this web service (could be retrieved from credentials [possibly user-name/login], when implemented later). deposit - single manuscript XML file accompanied with figure images, equations where applicable. The deposit could be provided as a single archive file (in zip, tar, tar.gz or tgz formats) which includes an XML (manuscript) with all image files it depends on. Or as individual files. domain - the name to be used in the context of manuscript branding and processes applied by the back-end service. item - as an input to web service: an entity which represents a file (or/and URL) the depositor suppose to provide for this web service to be used in the conversion process of the deposit to PDF document. When an item is a file, it has to be uploaded to Amazon S3 storage controlled by NCBI separatly. When an item is an URL starting with \"http://\", \"https://\" or \"ftp://\" sub-strings then the web service must be able to retrieve a file behind that URL from depositor's storage resource. This property is optional at the time of creation of deposit, but needs to be supplied in a separate POST request(s) individually via following URI /deposits/{deposit_pk}/items/ or with PUT , PATCH request via URI /deposits/{deposit_pk} if item needs to be replaced or modified. deposit_pk - the web service generated identifier of the deposit. item_pk - the web service generated identifier of the item.","title":"Definitions"},{"location":"1README-API.html#api-functionalities","text":"","title":"API functionalities"},{"location":"1README-API.html#aimed-for-depositors","text":"Create a deposit . Read/View deposit state/details. Read/View collection of deposits states/details (with filters and sorting). Update/Replace a deposit Update/Modify a deposit Delete a deposit Create an item . Read/View item state/details. Read/View collection of items for a given deposit (with filters and sorting). Update/Replace an item Update/Modify an item Delete an item Commit deposit for processing/conversion. Read/View domain details. Read/View collection of domains (with filters and sorting).","title":"Aimed for depositors"},{"location":"1README-API.html#aimed-for-be-service","text":"Create a domain . Read/View domain state/details. Read/View collection of domains for a given deposit (with filters and sorting). Update/Replace a domain Update/Modify a domain Delete a domain Read/View deposit state/details. Read/View collection of deposits states/details (with filters and sorting). Update/Modify a deposit . Read/View item state/details. Read/View collection of items for a given deposit (with filters and sorting). Update/Modify an item FIXME: check if you really need these: Create a result . Read/View result state/details. Read/View collection of results for a given deposit (with filters and sorting). Update/Replace a result Update/Modify a result Delete a result (jats2pdf-be)","title":"Aimed for BE service"},{"location":"1README-API.html#api-specifications","text":"","title":"API specifications"},{"location":"1README-API.html#uri-schema","text":"deposit collection - /deposits/ individual deposit - /deposits/{deposit_pk} item collection of a given deposit - /deposits/{deposit_pk}/items/ individual item - /deposits/{deposit_pk}/items/{item_pk} FIXME: check if you really need these: result collection of a given deposit - /deposits/{deposit_pk}/results/ individual result - /deposits/{deposit_pk}/results/{ruidX} domain collection - /domains/ individual domain - /domains/{domain_pk} depositor collection - /depositors/ individual depositor - /depositors/{depositor_pk} FIXME: list actions on deposits and items","title":"URI schema"},{"location":"1README-API.html#properties-of-deposit","text":"","title":"PROPERTIES of deposit"},{"location":"1README-API.html#deposit-as-response","text":"{ \"deposit_uid\": $string, \"path\": $string, \"depositor\": $string, \"domain\": $string, \"state\": $string, // ENUM: [FIXME: values] \"state_info\": $string, \"created\": $string($date-time), \"updated\": $string($date-time) \"items\": [{}, ...] }","title":"deposit as response"},{"location":"1README-API.html#deposit-properties","text":"deposit_uid - a deposit unique identifier. path - a URI of the deposit. depositor - see explanations in Definitions section. domain - see explanations in Definitions section. state - a machine-readable deposit state. FIXME: detail deposit states (create FSM diagram). state_info - a human-readable deposit state. FIXME: human-readable string of the deposit state. created - time of creation of the deposit. updated - time of the last update of the deposit. items - an array of deposit items, see explanations of item in Definitions section. In this document you may see mnemonic value(s):","title":"deposit properties"},{"location":"1README-API.html#deposit-as-input","text":"The following JSON snippet demonstrates the input understood by web service. FIXME: add properties or action values to transition states of the deposit to be used by back-end service report progress of the processing. { \"depositor\": $string, \"domain\": $string, \"items\": [{$item}, ..., {$item}], \"action\": $string // ENUM: [\"commit\", \"retry\"] } depositor - an abbreviation of the depositor. Required at the time of creation (POST). Optional in all other circumstances. domain - a required property of information of the \"domain\" the manuscript belongs to. Required at the time of creation (POST). Optional in all other circumstances. items - an array of filenames OR URIs. action - an optional property to be used to initiate an action for deposit . The following values are recognized: commit , retry . commit - could be provided at the time of creation/replacement of the deposit (make sense if items are provided as URLs and could be downloaded by back-end service right after creation of deposit ) or it should be used separately with PATCH methods and with /deposits/{deposit_pk} URI location, see mode details in UPDATE/MODIFY deposit section.","title":"deposit as input"},{"location":"1README-API.html#properties-of-item","text":"","title":"PROPERTIES of item"},{"location":"1README-API.html#item-as-response","text":"{ \"item_pk\": $string, \"path\": $string, \"depositor\": $string, \"s3_put_url\": $string, \"s3_get_url\": $string, \"state\": $string, // ENUM: [FIXME: values] \"created\": $string($date-time), \"updated\": $string($date-time), \"result\": $boolean },","title":"item as response"},{"location":"1README-API.html#item-properties","text":"item_pk - an item unique identifier. path - a URI of the item, like the following URI \"/deposits/{deposit_pk}/items/{item_pk}\", depositor - an abbreviation of the depositor. s3_put_url - property is applicable when depositor intention was to deposit file to Amazon S3 storage controlled by NCBI. The value of this property (URL) will be regenerated with new expiration time, every time, when depositor access a deposit with \"deposit_pk\" or item with \"item_pk\". It will not be present if depositor provided a retrievable URL. puturl value is suitable to be used with method PUT when the file suppose to be uploaded to Amazon S3 storage. s3_get_url - populated with retrievable URL if it was provided by depositor or with signed URL if depositor uploaded a file to Amazon S3 storage. This URL is suitable to be used with method GET when the file is uploaded to Amazon S3 storage ( geturl is needed for jats2pdf-be back-end service). errors - a machine readable item state. FIXME: detail item states (create FSM diagram). created - time of creation of the item. FIXME: provide details on the type/format/specs of date/time updated - time of the last update of the item. FIXME: provide details on the type/format/specs of date/time result - a boolean property, which indicates, that the item is the result of conversion.","title":"item properties"},{"location":"1README-API.html#item-as-input","text":"The following JSON snippet demonstrates the input understood by web service. { \"depositor\": $string, \"item\": $string, \"item_size\": $integer, // range constrain is [1 - 10,000,000] bytes \"item_md5\": $string, \"result\": $boolean } depositor - an abbreviation of the depositor. item - see explanations in Definitions section. result - a boolean property, which indicates, that the item is the result of the conversion. (optional property, which is suitable for back-end service to upload the result for depositor). item_size - file size of an item item_md5 - md5 digest strings in hexadecimal format.","title":"item as input"},{"location":"1README-API.html#create-deposit","text":"HTTP REQUEST method HTTP POST location URI HTTP /deposits/ HTTP body - JSON string. See details in section deposit as input HTTP RESPONSE (On successful creation) HTTP code HTTP 201 (Created) HTTP header HTTP Location: /deposits/{deposit_pk} HTTP body is a JSON string. See details of deposit in PROPERTIES of deposit section JSON {...}","title":"CREATE deposit"},{"location":"1README-API.html#read-deposit","text":"HTTP REQUEST method HTTP GET location URI HTTP /deposits/{deposit_pk} HTTP RESPONSE (if successful) HTTP code HTTP 200 (OK) HTTP body is a JSON string. See details of deposit in PROPERTIES of deposit section JSON {...}","title":"READ deposit"},{"location":"1README-API.html#read-deposit-collection","text":"HTTP REQUEST method HTTP GET location URI HTTP /deposits/ filters (as CGI params) HTTP deposit_uid=... state=... depositor=... domain=... order (as CGI param) HTTP __orderby=... HTTP RESPONSE (if successful) HTTP code HTTP 200 (OK) HTTP body is a JSON string. See details of deposit in PROPERTIES of deposit section JSON [ // zero deposits [], {}, // one deposit ... // or more deposits if available. ]","title":"READ deposit collection"},{"location":"1README-API.html#updatereplace-deposit","text":"HTTP REQUEST method HTTP PUT location URI HTTP /deposits/{deposit_pk} HTTP body - JSON string. See details in section deposit as input HTTP RESPONSE (On successful creation) HTTP code HTTP 209 (OK) HTTP body is a JSON string. See details of deposit in PROPERTIES of deposit section JSON {...}","title":"UPDATE/REPLACE deposit"},{"location":"1README-API.html#updatemodify-deposit","text":"HTTP REQUEST method HTTP PATCH location URI HTTP /deposits/{deposit_pk} HTTP body - JSON string. See details in section deposit as input JSON {...} HTTP RESPONSE (if successful) HTTP code HTTP 200 (OK) HTTP body is a JSON string. See details of deposit in PROPERTIES of deposit section JSON {...}","title":"UPDATE/MODIFY deposit"},{"location":"1README-API.html#delete-deposit","text":"HTTP REQUEST method HTTP DELETE location URI HTTP /deposits/{deposit_pk} HTTP RESPONSE (if successful) HTTP code HTTP 200 (OK) HTTP body is a JSON string. See details of deposit in PROPERTIES of deposit section JSON {...}","title":"DELETE deposit"},{"location":"1README-API.html#create-item","text":"HTTP REQUEST method HTTP POST location URI HTTP /deposits/{deposit_pk}/items/ HTTP body - JSON string. See detail in section item as input HTTP RESPONSE (On successful creation) HTTP code HTTP 201 (Created) HTTP header HTTP Location: /deposits/{deposit_pk}/items/{item_pk} HTTP body is a JSON string. See details of deposit in item as response section JSON {...}","title":"CREATE item"},{"location":"1README-API.html#read-item","text":"HTTP REQUEST method HTTP GET location URI HTTP /deposits/{deposit_pk}/items/{item_pk} HTTP RESPONSE (if successful) HTTP code HTTP 200 (OK) HTTP body is a JSON string. See details of deposit in PROPERTIES of item section JSON {...} // properties of the single item","title":"READ item"},{"location":"1README-API.html#read-item-collection","text":"HTTP REQUEST method HTTP GET location URI HTTP /deposits/{deposit_pk}/items/ filters (as CGI params) HTTP item_pk=... state=... depositor=... order (as CGI param) HTTP __orderby=... HTTP RESPONSE (if successful) HTTP code HTTP 200 (OK) HTTP body is a JSON string. See details of deposit in PROPERTIES of item section JSON [ // zero items [], {}, // one item ... // or more items if available. ]","title":"READ item collection"},{"location":"1README-API.html#updatereplace-item","text":"HTTP REQUEST method HTTP PUT location URI HTTP /deposits/{deposit_pk}/item/{item_pk} HTTP body - JSON string. See details in section deposit as input HTTP RESPONSE (On successful creation) HTTP code HTTP 209 (OK) HTTP body is a JSON string. See details of deposit in PROPERTIES of deposit section JSON {...}","title":"UPDATE/REPLACE item"},{"location":"1README-API.html#updatemodify-item","text":"HTTP REQUEST method HTTP PATCH location URI HTTP /deposits/{deposit_pk}/item/{item_pk} HTTP body - JSON string. See details in section deposit as input JSON {...} HTTP RESPONSE (if successful) HTTP code HTTP 200 (OK) HTTP body is a JSON string. See details of deposit in PROPERTIES of deposit section JSON {...}","title":"UPDATE/MODIFY item"},{"location":"1README-API.html#delete-item","text":"HTTP REQUEST method HTTP DELETE location URI HTTP /deposits/{deposit_pk}/items/{item_pk} HTTP RESPONSE (if successful) HTTP code HTTP 200 (OK) HTTP body is a JSON string. See details of item in PROPERTIES of item section JSON {...}","title":"DELETE item"},{"location":"2README-API-USE-EXAMPLES.html","text":"API use examples","title":"API use examples"},{"location":"2README-API-USE-EXAMPLES.html#api-use-examples","text":"","title":"API use examples"},{"location":"3BACKOFFICE.html","text":"Backoffice","title":"Backoffice"},{"location":"3BACKOFFICE.html#backoffice","text":"","title":"Backoffice"}]}